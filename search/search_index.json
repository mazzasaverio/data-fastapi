{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to FastAPI Your Data Documentation Welcome to the official documentation for FastAPI Your Data, a project aimed at providing a comprehensive guide and toolkit for managing, organizing, and utilizing data effectively with FastAPI. Overview This documentation is designed to be both a theoretical guide and a practical handbook, serving as a technical diary for the considerations and experiments conducted throughout the development of the FastAPI Your Data project. Navigate through the sections to find detailed information on setup, usage, best practices, and insights gained from real-world application and continuous improvement of the project. Getting Started If you're new to FastAPI Your Data, we recommend starting with the Getting Started section to set up your environment and take your first steps with the project. Contributions Contributions to FastAPI Your Data are welcome! Thank you for being part of the FastAPI Your Data community!","title":"Home"},{"location":"#welcome-to-fastapi-your-data-documentation","text":"Welcome to the official documentation for FastAPI Your Data, a project aimed at providing a comprehensive guide and toolkit for managing, organizing, and utilizing data effectively with FastAPI.","title":"Welcome to FastAPI Your Data Documentation"},{"location":"#overview","text":"This documentation is designed to be both a theoretical guide and a practical handbook, serving as a technical diary for the considerations and experiments conducted throughout the development of the FastAPI Your Data project. Navigate through the sections to find detailed information on setup, usage, best practices, and insights gained from real-world application and continuous improvement of the project.","title":"Overview"},{"location":"#getting-started","text":"If you're new to FastAPI Your Data, we recommend starting with the Getting Started section to set up your environment and take your first steps with the project.","title":"Getting Started"},{"location":"#contributions","text":"Contributions to FastAPI Your Data are welcome! Thank you for being part of the FastAPI Your Data community!","title":"Contributions"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"chapter-1-getting-started/installation/","text":"","title":"Installation"},{"location":"chapter-2-project-structure/project_structure/","text":"Project Structure. Consistent & predictable There are many ways to structure the project, but the best structure is a structure that is consistent, straightforward, and has no surprises. If looking at the project structure doesn't give you an idea of what the project is about, then the structure might be unclear. If you have to open packages to understand what modules are located in them, then your structure is unclear. If the frequency and location of the files feels random, then your project structure is bad. If looking at the module's location and its name doesn't give you an idea of what's inside it, then your structure is very bad. Although the project structure, where we separate files by their type (e.g. api, crud, models, schemas) presented by @tiangolo is good for microservices or projects with fewer scopes, we couldn't fit it into our monolith with a lot of domains and modules. Structure that I found more scalable and evolvable is inspired by Netflix's Dispatch with some little modifications. Reference fastapi-alembic-sqlmodel-async https://github.com/BCG-X-Official/agentkit","title":"Project structure"},{"location":"chapter-3-data-migration/alembic/","text":"Enhanced Alembic Migrations Documentation Migration Naming Convention When creating migration scripts, adhere to a consistent naming scheme that reflects the nature of the changes. The recommended format is date_slug.py , where date represents the creation date and slug provides a brief description of the migration's purpose. For example, 2022-08-24_post_content_idx.py . Configuration File Template In the alembic.ini file, define the file template to ensure that all migration scripts follow the established naming convention. The template should look like this: file_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s This ensures that every new migration script includes the date and a descriptive slug. Automated Migration Script Generation To streamline the process of creating migration scripts, use the --autogenerate option with the alembic revision command. This feature compares the current state of your database schema with your SQLAlchemy models and generates a migration script accordingly. Here's how you can use it: alembic revision --autogenerate -m \"Create tables\" Replace \"Create tables\" with a message that accurately describes the changes being implemented. Applying Migrations After generating the migration scripts, apply them to your database with the alembic upgrade command followed by head . This command executes the migration scripts against your database, bringing it up to date with the latest schema changes. alembic upgrade head By following these practices, you maintain a clear and organized history of your database schema changes, making it easier to manage and understand the evolution of your data model over time.","title":"Alembic"},{"location":"chapter-3-data-migration/alembic/#enhanced-alembic-migrations-documentation","text":"","title":"Enhanced Alembic Migrations Documentation"},{"location":"chapter-3-data-migration/alembic/#migration-naming-convention","text":"When creating migration scripts, adhere to a consistent naming scheme that reflects the nature of the changes. The recommended format is date_slug.py , where date represents the creation date and slug provides a brief description of the migration's purpose. For example, 2022-08-24_post_content_idx.py .","title":"Migration Naming Convention"},{"location":"chapter-3-data-migration/alembic/#configuration-file-template","text":"In the alembic.ini file, define the file template to ensure that all migration scripts follow the established naming convention. The template should look like this: file_template = %%(year)d-%%(month).2d-%%(day).2d_%%(slug)s This ensures that every new migration script includes the date and a descriptive slug.","title":"Configuration File Template"},{"location":"chapter-3-data-migration/alembic/#automated-migration-script-generation","text":"To streamline the process of creating migration scripts, use the --autogenerate option with the alembic revision command. This feature compares the current state of your database schema with your SQLAlchemy models and generates a migration script accordingly. Here's how you can use it: alembic revision --autogenerate -m \"Create tables\" Replace \"Create tables\" with a message that accurately describes the changes being implemented.","title":"Automated Migration Script Generation"},{"location":"chapter-3-data-migration/alembic/#applying-migrations","text":"After generating the migration scripts, apply them to your database with the alembic upgrade command followed by head . This command executes the migration scripts against your database, bringing it up to date with the latest schema changes. alembic upgrade head By following these practices, you maintain a clear and organized history of your database schema changes, making it easier to manage and understand the evolution of your data model over time.","title":"Applying Migrations"},{"location":"tutorials/how-to-create-a-changelog/","text":"Structuring a Changelog and Keeping It Updated Introduction to Changelog A changelog is a file that contains a curated, chronologically ordered list of notable changes for each version of a project. It serves to document the progress and significant changes made over time, making it easier for users and contributors to track what has been added, changed, removed, or fixed. How to Structure a Changelog File Naming and Format : The changelog file should be named CHANGELOG.md to indicate that it is written in Markdown format. This allows for easy readability and formatting. Release Headings : Each version release should have its own section, starting with a second-level heading that includes the version number and release date in the format ## [Version] - YYYY-MM-DD . It's essential to follow Semantic Versioning rules when versioning your releases. Change Categories : Within each release section, group changes into categories to improve readability. Common categories include: Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be-removed features. Removed for now-removed features. Fixed for any bug fixes. Security to address vulnerabilities. Notable Changes : List the changes under their respective categories using bullet points. Each item should briefly describe the change and, if applicable, reference the issue or pull request number. For example: Added: New search functionality to allow users to find posts by tags (#123). Highlighting Breaking Changes : Clearly highlight any breaking changes or migrations required by the users. This could be done in a separate section or marked distinctly within the appropriate category. Keeping Changelog Updated Manual Updates : Manually update the changelog as part of your project's release process. This involves summarizing the changes made since the last release, categorizing them, and adding them to the CHANGELOG.md file. Automate Generation : For projects with well-structured commit messages or pull requests, you can automate changelog generation using tools like GitHub Changelog Generator . These tools can parse your project's history to create a changelog draft that you can then edit for clarity and readability. Commit Message Discipline : Adopting a convention for commit messages, such as Conventional Commits , can facilitate the automated generation of changelogs. This approach requires discipline in writing commit messages but pays off in automation capabilities. Review Process : Regardless of whether the changelog is manually updated or generated automatically, it's essential to review the changelog entries for accuracy, clarity, and relevance to the project's users before finalizing a release. Example Changelog Entry ## [1.2.0] - 2024-03-10 ### Added - New search functionality to allow users to find posts by tags (#123). ### Changed - Improved performance of the database query for fetching posts. ### Fixed - Fixed a bug where users could not reset their passwords (#456). ### Security - Patched XSS vulnerability in post comments section. ### Breaking Changes - Removed deprecated `getPostById` API method. Use `getPost` instead. Conclusion Maintaining a changelog is a best practice that benefits both the project's users and its developers. By structuring the changelog clearly and keeping it up to date with each release, you ensure that your project's progress is transparent and that users can easily understand the impact of each update.","title":"How to Create a Changelog"},{"location":"tutorials/how-to-create-a-changelog/#structuring-a-changelog-and-keeping-it-updated","text":"","title":"Structuring a Changelog and Keeping It Updated"},{"location":"tutorials/how-to-create-a-changelog/#introduction-to-changelog","text":"A changelog is a file that contains a curated, chronologically ordered list of notable changes for each version of a project. It serves to document the progress and significant changes made over time, making it easier for users and contributors to track what has been added, changed, removed, or fixed.","title":"Introduction to Changelog"},{"location":"tutorials/how-to-create-a-changelog/#how-to-structure-a-changelog","text":"File Naming and Format : The changelog file should be named CHANGELOG.md to indicate that it is written in Markdown format. This allows for easy readability and formatting. Release Headings : Each version release should have its own section, starting with a second-level heading that includes the version number and release date in the format ## [Version] - YYYY-MM-DD . It's essential to follow Semantic Versioning rules when versioning your releases. Change Categories : Within each release section, group changes into categories to improve readability. Common categories include: Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be-removed features. Removed for now-removed features. Fixed for any bug fixes. Security to address vulnerabilities. Notable Changes : List the changes under their respective categories using bullet points. Each item should briefly describe the change and, if applicable, reference the issue or pull request number. For example: Added: New search functionality to allow users to find posts by tags (#123). Highlighting Breaking Changes : Clearly highlight any breaking changes or migrations required by the users. This could be done in a separate section or marked distinctly within the appropriate category.","title":"How to Structure a Changelog"},{"location":"tutorials/how-to-create-a-changelog/#keeping-changelog-updated","text":"Manual Updates : Manually update the changelog as part of your project's release process. This involves summarizing the changes made since the last release, categorizing them, and adding them to the CHANGELOG.md file. Automate Generation : For projects with well-structured commit messages or pull requests, you can automate changelog generation using tools like GitHub Changelog Generator . These tools can parse your project's history to create a changelog draft that you can then edit for clarity and readability. Commit Message Discipline : Adopting a convention for commit messages, such as Conventional Commits , can facilitate the automated generation of changelogs. This approach requires discipline in writing commit messages but pays off in automation capabilities. Review Process : Regardless of whether the changelog is manually updated or generated automatically, it's essential to review the changelog entries for accuracy, clarity, and relevance to the project's users before finalizing a release.","title":"Keeping Changelog Updated"},{"location":"tutorials/how-to-create-a-changelog/#example-changelog-entry","text":"## [1.2.0] - 2024-03-10 ### Added - New search functionality to allow users to find posts by tags (#123). ### Changed - Improved performance of the database query for fetching posts. ### Fixed - Fixed a bug where users could not reset their passwords (#456). ### Security - Patched XSS vulnerability in post comments section. ### Breaking Changes - Removed deprecated `getPostById` API method. Use `getPost` instead.","title":"Example Changelog Entry"},{"location":"tutorials/how-to-create-a-changelog/#conclusion","text":"Maintaining a changelog is a best practice that benefits both the project's users and its developers. By structuring the changelog clearly and keeping it up to date with each release, you ensure that your project's progress is transparent and that users can easily understand the impact of each update.","title":"Conclusion"},{"location":"tutorials/mkdocs-setup-and-usage-guide/","text":"Creating a Documentation with MkDocs To create a living documentation for your project fastapi-your-data that acts as a theoretical guide, practical handbook, and technical diary, we will use MkDocs in combination with GitHub and Python. This guide covers setting up MkDocs, organizing documentation, configuring it with mkdocs.yml , writing documentation in Markdown, and deploying it using GitHub Actions. Setting Up MkDocs Install MkDocs : Ensure you have Python 3.6 or higher and pip installed. Install MkDocs with pip: pip install mkdocs Initialize MkDocs Project : In your project's root directory ( /home/sam/github/fastapi-your-data ), initialize MkDocs: mkdocs new . This creates a mkdocs.yml configuration file and a docs directory with an index.md file for your documentation. Organizing Documentation Content Create a structured documentation within the docs directory. Example structure: docs/ index.md getting-started/ installation.md tutorials/ mkdocs-setup-and-usage-guide.md changelog.md Configuring Documentation in mkdocs.yml Edit the mkdocs.yml file to define your documentation's structure and navigation. Example configuration: site_name: FastAPI Your Data Documentation nav: - Home: index.md - Getting Started: getting-started/installation.md - Tutorials: tutorials/mkdocs-setup-and-usage-guide.md - Changelog: changelog.md theme: readthedocs Writing Documentation Write your documentation content in Markdown format. Markdown files should be saved inside the docs directory according to the structure defined in mkdocs.yml . Example content for installation.md : # Installation ## Requirements - Python 3.6 or higher - pip ## Installation Steps To install the required packages, run: ```bash pip install -r requirements.txt ``` #### Previewing Documentation Locally Use MkDocs' built-in server to preview your documentation: ```bash mkdocs serve Visit http://127.0.0.1:8000 in your browser to see your documentation. Deploying Documentation Build the static site with: mkdocs build The static site is generated in the site directory. Deploy this directory to any web server. For GitHub Pages, you can automate deployment using GitHub Actions as described below. Automating Deployment with GitHub Actions GitHub Actions Workflow In your project, create a workflow file under .github/workflows/ (e.g., deploy-docs.yml ) to define the steps for building and deploying your documentation to GitHub Pages. Generating a GitHub Token To perform actions such as deploying to GitHub Pages through GitHub Actions, you often need a GitHub token with the appropriate permissions. Here's how you can generate a MY_GITHUB_TOKEN : Access GitHub Token Settings Log in to your GitHub account. Click on your profile picture in the top right corner and select Settings . On the left sidebar, click on Developer settings . Under Developer settings, click on Personal access tokens . Click on the Generate new token button. Configure Token Permissions Give your token a descriptive name in the Note field. Set the expiration for your token as per your requirement. For continuous integration (CI) purposes, you might want to select a longer duration or no expiration. Select the scopes or permissions you want to grant this token. For deploying to GitHub Pages, you typically need: repo - Full control of private repositories (includes public_repo for public repositories). Additionally, you might need other permissions based on your specific requirements, but for deployment, repo is often sufficient. Scroll down and click Generate token . After clicking Generate token , GitHub will display your new personal access token. Make sure to copy your new personal access token now. You won\u2019t be able to see it again! For use in GitHub Actions: Go to your repository on GitHub. Click on Settings > Secrets > Actions . Click on New repository secret . Name your secret MY_GITHUB_TOKEN (or another name if you prefer, but remember to reference the correct name in your workflow file). Paste your token into the Value field and click Add secret .``` If you named your secret something other than MY_GITHUB_TOKEN , make sure to reference it correctly in the MY_GITHUB_TOKEN field. Workflow Example Here's an example workflow that uses the peaceiris/actions-gh-pages action to deploy your MkDocs site to GitHub Pages: name: Deploy MkDocs Site on: push: branches: - master jobs: deploy-docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Python uses: actions/setup-python@v2 with: python-version: \"3.x\" - name: Install dependencies run: | pip install mkdocs - name: Build MkDocs site run: mkdocs build - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.MY_GITHUB_TOKEN }} publish_dir: ./site This workflow automatically builds and deploys your MkDocs site to GitHub Pages whenever changes are pushed to the master branch. Conclusion You've now set up MkDocs for your project, organized your documentation, written content in Markdown, previewed it locally, and deployed it using GitHub Actions. This setup allows you to maintain a comprehensive, up-to-date documentation for your project, facilitating both development and user guidance.","title":"MkDocs Setup and Usage Guide"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#creating-a-documentation-with-mkdocs","text":"To create a living documentation for your project fastapi-your-data that acts as a theoretical guide, practical handbook, and technical diary, we will use MkDocs in combination with GitHub and Python. This guide covers setting up MkDocs, organizing documentation, configuring it with mkdocs.yml , writing documentation in Markdown, and deploying it using GitHub Actions.","title":"Creating a Documentation with MkDocs"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#setting-up-mkdocs","text":"Install MkDocs : Ensure you have Python 3.6 or higher and pip installed. Install MkDocs with pip: pip install mkdocs Initialize MkDocs Project : In your project's root directory ( /home/sam/github/fastapi-your-data ), initialize MkDocs: mkdocs new . This creates a mkdocs.yml configuration file and a docs directory with an index.md file for your documentation.","title":"Setting Up MkDocs"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#organizing-documentation-content","text":"Create a structured documentation within the docs directory. Example structure: docs/ index.md getting-started/ installation.md tutorials/ mkdocs-setup-and-usage-guide.md changelog.md","title":"Organizing Documentation Content"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#configuring-documentation-in-mkdocsyml","text":"Edit the mkdocs.yml file to define your documentation's structure and navigation. Example configuration: site_name: FastAPI Your Data Documentation nav: - Home: index.md - Getting Started: getting-started/installation.md - Tutorials: tutorials/mkdocs-setup-and-usage-guide.md - Changelog: changelog.md theme: readthedocs","title":"Configuring Documentation in mkdocs.yml"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#writing-documentation","text":"Write your documentation content in Markdown format. Markdown files should be saved inside the docs directory according to the structure defined in mkdocs.yml . Example content for installation.md : # Installation ## Requirements - Python 3.6 or higher - pip ## Installation Steps To install the required packages, run: ```bash pip install -r requirements.txt ``` #### Previewing Documentation Locally Use MkDocs' built-in server to preview your documentation: ```bash mkdocs serve Visit http://127.0.0.1:8000 in your browser to see your documentation.","title":"Writing Documentation"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#deploying-documentation","text":"Build the static site with: mkdocs build The static site is generated in the site directory. Deploy this directory to any web server. For GitHub Pages, you can automate deployment using GitHub Actions as described below.","title":"Deploying Documentation"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#automating-deployment-with-github-actions","text":"GitHub Actions Workflow In your project, create a workflow file under .github/workflows/ (e.g., deploy-docs.yml ) to define the steps for building and deploying your documentation to GitHub Pages. Generating a GitHub Token To perform actions such as deploying to GitHub Pages through GitHub Actions, you often need a GitHub token with the appropriate permissions. Here's how you can generate a MY_GITHUB_TOKEN : Access GitHub Token Settings Log in to your GitHub account. Click on your profile picture in the top right corner and select Settings . On the left sidebar, click on Developer settings . Under Developer settings, click on Personal access tokens . Click on the Generate new token button. Configure Token Permissions Give your token a descriptive name in the Note field. Set the expiration for your token as per your requirement. For continuous integration (CI) purposes, you might want to select a longer duration or no expiration. Select the scopes or permissions you want to grant this token. For deploying to GitHub Pages, you typically need: repo - Full control of private repositories (includes public_repo for public repositories). Additionally, you might need other permissions based on your specific requirements, but for deployment, repo is often sufficient. Scroll down and click Generate token . After clicking Generate token , GitHub will display your new personal access token. Make sure to copy your new personal access token now. You won\u2019t be able to see it again! For use in GitHub Actions: Go to your repository on GitHub. Click on Settings > Secrets > Actions . Click on New repository secret . Name your secret MY_GITHUB_TOKEN (or another name if you prefer, but remember to reference the correct name in your workflow file). Paste your token into the Value field and click Add secret .``` If you named your secret something other than MY_GITHUB_TOKEN , make sure to reference it correctly in the MY_GITHUB_TOKEN field. Workflow Example Here's an example workflow that uses the peaceiris/actions-gh-pages action to deploy your MkDocs site to GitHub Pages: name: Deploy MkDocs Site on: push: branches: - master jobs: deploy-docs: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Python uses: actions/setup-python@v2 with: python-version: \"3.x\" - name: Install dependencies run: | pip install mkdocs - name: Build MkDocs site run: mkdocs build - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.MY_GITHUB_TOKEN }} publish_dir: ./site This workflow automatically builds and deploys your MkDocs site to GitHub Pages whenever changes are pushed to the master branch.","title":"Automating Deployment with GitHub Actions"},{"location":"tutorials/mkdocs-setup-and-usage-guide/#conclusion","text":"You've now set up MkDocs for your project, organized your documentation, written content in Markdown, previewed it locally, and deployed it using GitHub Actions. This setup allows you to maintain a comprehensive, up-to-date documentation for your project, facilitating both development and user guidance.","title":"Conclusion"}]}